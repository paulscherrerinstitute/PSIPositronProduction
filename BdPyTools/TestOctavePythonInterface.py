"""
Unit Testing of Module Octave Python Interface
==============================================

"""

import unittest
import OctavePythonInterface as opi


class TestOctavePythonInterface(unittest.TestCase):
    """Unit testing for the class OctavePythonInterface."""

    def test_find_octave_matrices_all(self):
        """Test function looking for the location of matrices in ASCII files generated by Octave."""
        SOURCE_FILE_PATH = 'RunningSimulations/RFTrack/YongkeTool_V2/field/' + \
            'field_map_HTS_5coils_Apr2022.dat'
        matList = opi.find_octave_all_matrices(SOURCE_FILE_PATH)
        matNamesInFile = ['Z', 'R', 'Br', 'Bz']
        matStartIndsInFile = [2, 309, 616, 923]
        matEndIndsInFile = [306, 613, 920, 1227]
        self.assertEqual(len(matList), len(matNamesInFile))
        for mInd in range(len(matNamesInFile)):
            self.assertEqual(matList[mInd]['name'], matNamesInFile[mInd])
            self.assertEqual(matList[mInd]['startInd'], matStartIndsInFile[mInd])
            self.assertEqual(matList[mInd]['endInd'], matEndIndsInFile[mInd])

    def test_load_octave_matrices_real(self):
        """Test loading of real matrices from ASCII file generated by Octave."""
        SOURCE_FILE_PATH = 'RunningSimulations/RFTrack/YongkeTool_V2/field/' + \
            'field_map_HTS_5coils_Apr2022.dat'
        matrices = opi.load_octave_matrices(SOURCE_FILE_PATH)
        self.assertEqual(matrices['Z'].shape, (301, 14981))
        self.assertAlmostEqual(matrices['Z'][0, 0], -499.)
        self.assertAlmostEqual(matrices['Z'][5, 7], -498.3)
        self.assertAlmostEqual(matrices['Bz'][-2, 4], 0.008407297199999771)
        self.assertAlmostEqual(matrices['Bz'][-1, 0], 0.)

    def test_load_octave_matrices_1d_complex(self):
        """Test loading of real and complex 1D arrays from ASCII file generated by Octave."""
        SOURCE_FILE_PATH = 'RunningSimulations/RFTrack/YongkeTool_V3/field/' + \
            'field_map_LargeR_Lband.dat'
        matrices = opi.load_octave_matrices(SOURCE_FILE_PATH)
        self.assertEqual(matrices['Z'].shape, (4755, ))
        self.assertAlmostEqual(matrices['Z'][0], 0)
        self.assertAlmostEqual(matrices['Z'][-1], 3.207140262362249)
        self.assertEqual(matrices['Ez'].shape, (4755, ))
        self.assertAlmostEqual(matrices['Ez'][0], 7790.507766649284 + 9976.53891022648j)
        self.assertAlmostEqual(matrices['Ez'][-1], 3846.412636235652 - 12637.1855663522j)
        self.assertAlmostEqual(matrices['frequency'], 2e9)
        self.assertAlmostEqual(matrices['phase_advance'], 2.827433388230814)
        self.assertAlmostEqual(matrices['wave_direction'], +1)
        self.assertAlmostEqual(matrices['cell_length'], 0.067455)
        self.assertAlmostEqual(matrices['gradient_avg'], 20e6)
        self.assertAlmostEqual(matrices['tot_cells'], 44)

    def test_load_octave_matrices_2d_complex(self):
        """Test loading of real and complex 2D matrices from ASCII file generated by Octave."""
        SOURCE_FILE_PATH = 'Data/Fieldmaps/pLinacF3_full44cells_YZplane_dy2mm_dz0p1L.dat'
        matrices = opi.load_octave_matrices(SOURCE_FILE_PATH)
        matNames = ['X', 'Y', 'Z', 'Ex', 'Ey', 'Ez', 'Bx', 'By', 'Bz']
        for matName in matNames:
            self.assertEqual(matrices[matName].shape, (461, 16))
        self.assertAlmostEqual(matrices['X'][0, 0], 0)
        self.assertAlmostEqual(matrices['X'][-1, -1], 0)
        self.assertAlmostEqual(matrices['Y'][0, 0], 0)
        self.assertAlmostEqual(matrices['Y'][-1, 0], 0)
        self.assertAlmostEqual(matrices['Y'][0, -1], 0.03)
        self.assertAlmostEqual(matrices['Y'][-1, -1], 0.03)
        self.assertAlmostEqual(matrices['Z'][0, 0], 5.196669695000000e-02)
        self.assertAlmostEqual(matrices['Z'][-1, 0], 3.154818637250000)
        self.assertAlmostEqual(matrices['Z'][0, -1], 5.196669695000000e-02)
        self.assertAlmostEqual(matrices['Z'][-1, -1], 3.154818637250000)
        self.assertAlmostEqual(
            matrices['Ex'][0, 0], -7.987357288362713e+02 - 1.067114848257063e+03j)
        self.assertAlmostEqual(
            matrices['Ex'][136, 7], -1.566904427040521e+02 + 2.843456686314325e+03j)
        self.assertAlmostEqual(
            matrices['Ex'][-1, -1], 0.332262135578065 - 1.020991982409293j)
        self.assertAlmostEqual(matrices['Bz'][0, 0], -2.543759851714633 + 1.861277953048682j)
        self.assertAlmostEqual(
            matrices['Bz'][48, 15], 3.242409969088708 + 1.615354139397666j)
        self.assertAlmostEqual(
            matrices['Bz'][-1, -1], -2.923295645190904 - 0.934431967374095j)

    def test_load_octave_matrices_3d_complex(self):
        """Test loading of real, complex and eventually multidimensional arrays from ASCII file
        generated by Octave."""
        SOURCE_FILE_PATH = 'RunningSimulations/RFTrack/YongkeTool_V2/field/field_map_CLIC_Lband.dat'
        matrices = opi.load_octave_matrices(SOURCE_FILE_PATH)
        self.assertEqual(matrices['R'].shape, (20, ))
        self.assertAlmostEqual(matrices['R'][0], 0)
        self.assertAlmostEqual(matrices['R'][-1], 0.02)
        self.assertEqual(matrices['PHI'].shape, (40, ))
        self.assertAlmostEqual(matrices['PHI'][0], -3.141592653589793)
        self.assertAlmostEqual(matrices['PHI'][-1], 3.141592653589793)
        self.assertEqual(matrices['Z'].shape, (150, ))
        self.assertAlmostEqual(matrices['Z'][0], 0)
        self.assertAlmostEqual(matrices['Z'][-1], 0.15)
        self.assertEqual(matrices['Ex'].shape, (20, 40, 150))
        self.assertAlmostEqual(matrices['Ex'][0, 0, 0], 185.75-111.531j)
        self.assertAlmostEqual(matrices['Ex'][8, 27, 73], 173729.+120629.j)
        self.assertAlmostEqual(matrices['Ex'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(matrices['Ey'][0, 0, 0], 6.61316-5.9082j)
        self.assertAlmostEqual(matrices['Ey'][17, 3, 21], 1006060.-148331.j)
        self.assertAlmostEqual(matrices['Ey'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(matrices['Ez'][0, 0, 0], 3424960+4464380.j)
        self.assertAlmostEqual(matrices['Ez'][14, 19, 128], -8.48514e+06+1.63598e+07j)
        self.assertAlmostEqual(matrices['Ez'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(matrices['Bx'][0, 0, 0], 3.83015436503299e-08-1.914599660433149e-08j)
        self.assertAlmostEqual(
            matrices['Bx'][17, 36, 15], 3.088110180255080e-04-8.313207081705624e-03j)
        self.assertAlmostEqual(matrices['Bx'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(
            matrices['By'][0, 0, 0], -7.389189284061181e-07+5.537672804112114e-07j)
        self.assertAlmostEqual(
            matrices['By'][2, 39, 61], -1.504747482845825e-03+6.283210439920815e-04j)
        self.assertAlmostEqual(matrices['By'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(
            matrices['Bz'][0, 0, 0], 1.645804992992007e-10-3.291584853242784e-10j)
        self.assertAlmostEqual(
            matrices['Bz'][12, 5, 80], 3.800736491424775e-07-4.898672858371950e-08j)
        self.assertAlmostEqual(matrices['Bz'][19, 39, 149], 0+0j)
        self.assertAlmostEqual(matrices['frequency'], 1.9986163867e+09)
        self.assertAlmostEqual(matrices['phase_advance'], 2.094395102393195)
        self.assertAlmostEqual(matrices['wave_direction'], +1)
        self.assertAlmostEqual(matrices['cell_length'], 0.005)
        self.assertAlmostEqual(matrices['gradient_avg'], 11.23e6)
        self.assertAlmostEqual(matrices['tot_cells'], 3)


if __name__ == '__main__':
    unittest.main()
